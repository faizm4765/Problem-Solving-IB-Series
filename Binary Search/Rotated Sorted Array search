int binarySearch1(vector<int>nums){
           
        int l = 0,r = nums.size()-1;
        int index = -1,mid = 0,n = r + 1;
        if(n == 1)
            return 0;
        
        while(l <= r){
            mid = l + (r-l)/2;
            int succ = (mid + 1) % n;
            int pred = (mid +n -1) % n;
            if(nums[mid] <= nums[succ] and nums[mid] <= nums[pred])
                return mid;
            else if(nums[mid] <= nums[r]){
                r = mid - 1;
            }else if(nums[l] <= nums[mid]){
                l = mid + 1;
            }
        }  
        return 0;
}


int binarySearch(vector<int>a,int l,int h,int k){
    
    while(l<=h){
        
        int m = l + (h-l)/2;
        if(a[m] == k)
            return m;
        else if(a[m] < k){
            l = m+1;
        }else{
            h = m-1;
        }
    }
    return -1;
}


int Solution::search(const vector<int> &A, int B) {
    
    int pivot = binarySearch1(A);
   // return pivot;
    int l = binarySearch(A,0,pivot-1,B);
    if(l != -1)
        return l; 
   // cout<<l;
    return binarySearch(A,pivot,A.size()-1,B);
}
