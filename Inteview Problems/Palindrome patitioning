
int isPalindrome(string s,int i,int j){
    
    while(i<j){
        if(s[i] != s[j])
            return 0;
        i++;
        j--;
    }
    return 1;
}

int fun(string s,int i,int j,int dp[][502]){
    
    if(i>=j)
        return 0;
    
    if(isPalindrome(s,i,j))
        return (dp[i][j] = 0);
    
    if(dp[i][j] != -1)
        return dp[i][j];
        
    int l,r,mini = INT_MAX;
    
    for(int k=i;k<j;k++){
        if(dp[i][k] != -1){
            l = dp[i][k];
        }else{
            l = fun(s,i,k,dp);
        }
        if(dp[k+1][j] != -1){
            r = dp[k+1][j];
        }else{
            r = fun(s,k+1,j,dp);
        }
        
        mini = min(mini,l+r+1);
    }
    
    return (dp[i][j] = mini);
     
}


int Solution::minCut(string A) {
    int n = A.length();
    int dp[502][502];
    memset(dp,-1,sizeof(dp));
    return fun(A,0,n-1,dp);
}
