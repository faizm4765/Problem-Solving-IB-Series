/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<TreeNode*,int> go(TreeNode* root){
        if(root == NULL)
            return {NULL,0};
        if(root->left == NULL and root->right == NULL)
            return {root,1};
        pair<TreeNode*,int> l = go(root->left);
        pair<TreeNode*,int> r = go(root->right);
        int a = l.second, b = r.second;
        if(a == b){
            return {root,a + 1};
        }else if(a > b){
            return make_pair(l.first,a + 1);
        }else{
            return make_pair(r.first,b + 1);
        }
        return {};
    }
    
    
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        pair<TreeNode*,int> p;
        return go(root).first;
    }
};
